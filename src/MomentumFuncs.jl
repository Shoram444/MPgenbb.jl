"""
    get_pMag(T::Real, MASS::Real)

Description of get_pMag
--------------------------
Computes magnitude of momentum as:
``` |p| = ‚àö((MASS + T)¬≤ - MASS¬≤) ```.

Input arguments are:
+ T    : kinetic energy in [MeV]
+ MASS : particle mass in [MeV/c¬≤]
"""
function get_pMag(T::Real, MASS::Real)
	return sqrt( (MASS+T)^2 - MASS^2)
end

"""
    get_px(pMag, œï, Œ∏)

Description of get_px
--------------------------
Computes x-component of the momentum as:
``` p‚Çì = |p|*cos(œï)*sin(Œ∏) ```

Input arguments are:
+ pMag : momentum magnitude in [MeV]
+ œï    : azimuth angle in [rad]
+ Œ∏    : polar angle in [rad]
"""
function get_px(pMag, œï, Œ∏)
    return pMag*cos(œï)*sin(Œ∏)
end

"""
    get_py(pMag, œï, Œ∏)

Description of get_py
--------------------------
Computes y-component of the momentum as:
``` pùîÇ = |p|*sin(œï)*sin(Œ∏) ```

Input arguments are:
+ pMag : momentum magnitude in [MeV]
+ œï    : azimuth angle in [rad]
+ Œ∏    : polar angle in [rad]
"""
function get_py(pMag, œï, Œ∏)
    return pMag*sin(œï)*sin(Œ∏)
end

"""
    ```get_pz(pMag, Œ∏)```

Description of get_pz
--------------------------
Computes z-component of the momentum as:
`` pùê≥ = |p|*cos(Œ∏) ``

Input arguments are:
+ pMag : momentum magnitude in [MeV]
+ Œ∏    : polar angle in [rad]
"""
function get_pz(pMag, Œ∏)
    return pMag*cos(Œ∏)
end



"""
```get_first_vector(T::Real, MASS::Real)```

Description of ```get_first_vector```
-------------------------------
Returns the momentum vector of the first electron. Momentum magnitude is calculated from the electron kinetic energy (T). 
The direction is generated uniformly in a sphere.

The momentum components are (in order):
    + pMag - Magnitude of the momentum vector (given by the electron Energy)
    + px   - x-component
    + py   - y-component
    + pz   - z-component
    + Œ∏    - polar angle  (used in calculation of the second momentum vector)
    + œï    - azimuthal angle (used in calculation of the second momentum vector)
"""
function get_first_vector(T::Real, MASS::Real)
    pMag = get_pMag(T, MASS)
    œï = sample_phi()
    Œ∏ = sample_theta()
    px = get_px(pMag, œï, Œ∏)
    py = get_py(pMag, œï, Œ∏)
    pz = get_pz(pMag, Œ∏)
    return [pMag, px, py, pz, Œ∏, œï]
end


"""
```get_pPrime(T::Real, MASS::Real)```

Description of get_pPrime
-------------------------------
Returns the momentum (prime) vector of the second electron. The vector is generated as a random point from a circle projected onto the x-y plane. 
The circle radius is given by ``r = \\sin(Œ∏dif)|p1|``, where ``\\theta_{dif}`` is the generated angle between the two electrons and ``|p1|`` 
is the magnitude of the momentum vector of the first electron. The process assumes p1 to be directed along the z-axis (hence projection onto x-y plane).

The vector components are (in order):
    + ``\\sin(\\theta_{dif})\\cos(\\phi_2)pMag`` - x-component
    + ``\\sin(\\theta_{dif})\\sin(\\phi_2)pMag`` - y-component
    + ``\\cos(\\theta_{dif})pMag``               - z-component


```get_pPrime(T::Real, MASS::Real, Œ∏dif)```

Generates momentum (prime) vector of the second electron, where Œ∏dif is predefined. 

"""
function get_pPrime(T::Real, MASS::Real)
    pMag = get_pMag(T, MASS)
    Œ∏dif = sample_theta_dif()
    œï2   = sample_phi()
    
    return [ sin(Œ∏dif)*cos(œï2)*pMag ; sin(Œ∏dif)*sin(œï2)*pMag ; cos(Œ∏dif)*pMag ] # returns column vector of p2'
end

function get_pPrime(T::Real, MASS::Real, Œ∏dif)
    pMag = get_pMag(T, MASS)
    œï2   = sample_phi()
    
    return [ sin(Œ∏dif)*cos(œï2)*pMag ; sin(Œ∏dif)*sin(œï2)*pMag ; cos(Œ∏dif)*pMag ] # returns column vector of p2'
end



"""
```get_second_vector(T::Real, MASS::Real, p1::DataFrameRow) ```   p1 given as dataframe row 
```get_second_vector(T::Real, MASS::Real, p1::Vector{<:Real})``` p1 given as vector

Description of get_second_vector
--------------------------------
Returns the momentum vector of the second electron. Momentum magnitude is calculated from the electron kinetic energy (T). 
The direction is generated from sampling Œ∏dif angle (see ```sample_theta_dif()```). In order to calculate the direction: first a p2Prime vector is generated
(see ```get_pPrime(T::Real, MASS::Real)```) by sampling uniformly from a circle projected onto x-y plane, 
where the circle is determined by the p1 vector directed along z-axis. Afterwards, p2Prime is rotated along 1. y-axis, 2. z-axis to obtain p2 in the direction 
of a cone around p1, where the cone is given by Œ∏dif. The equation for p2 is:

`` p2 = Rz*Ry*p2Prime ``

The momentum components are (in order):
    + pMag - Magnitude of the momentum vector (given by the electron Energy)
    + px   - x-component
    + py   - y-component
    + pz   - z-component
    + Œ∏    - polar angle  (used in calculation of the second momentum vector)
    + œï    - azimuthal angle (used in calculation of the second momentum vector)
"""
function get_second_vector(T::Real, MASS::Real, p1::DataFrameRow)
    p2Prime = get_pPrime(T, MASS) # vector generated by randomly chosing point on circle projected onto xy plane

    p2 = [ 
        cos(p1.phi)*( p2Prime[1]*cos(p1.theta ) + p2Prime[3]*sin(p1.theta) ) - p2Prime[2]*sin(p1.phi)
        sin(p1.phi)*( p2Prime[1]*cos(p1.theta ) + p2Prime[3]*sin(p1.theta) ) + p2Prime[2]*cos(p1.phi)
        p2Prime[3]*cos(p1.theta ) - p2Prime[1]*sin(p1.theta )
    ]
    
    p2Mag = get_pMag(T, MASS)   
    Œ∏2 = acos(p2[3]/p2Mag)
    œï2 = atan(p2[2],p2[1])

    if (p2[1] == NaN)
        get_second_vector(T, MASS, p1)
    end
    
    return [ p2Mag, p2[1], p2[2], p2[3], Œ∏2, œï2 ]
end

function get_second_vector(T::Real, MASS::Real, p1::Vector{<:Real})
    p2Prime = get_pPrime(T, MASS) # vector generated by randomly chosing point on circle projected onto xy plane

    p2 = [ 
        cos(p1[6] )*( p2Prime[1]*cos(p1[5] ) + p2Prime[3]*sin(p1[5]) ) - p2Prime[2]*sin(p1[6])
        sin(p1[6] )*( p2Prime[1]*cos(p1[5] ) + p2Prime[3]*sin(p1[5]) ) + p2Prime[2]*cos(p1[6])
        p2Prime[3]cos(p1[5] ) - p2Prime[1]*sin(p1[5] )
    ]
    
    p2Mag = get_pMag(T, MASS)   
    Œ∏2 = acos(p2[3]/p2Mag)
    œï2 = atan(p2[2],p2[1])
    
    if (p2[1] == NaN)
        get_second_vector(T, MASS, p1)
    end

    return [ p2Mag, p2[1], p2[2], p2[3], Œ∏2, œï2 ]
end

function get_second_vector(T::Real, MASS::Real, p1::DataFrameRow, Œ∏dif::Real)
    p2Prime = get_pPrime(T, MASS, Œ∏dif) # vector generated by randomly chosing point on circle projected onto xy plane
    
    p2 = [ 
        cospi(p1.phi /œÄ)*( p2Prime[1]*cospi(p1.theta /œÄ) + p2Prime[3]*sinpi(p1.theta/œÄ) ) - p2Prime[2]*sinpi(p1.phi/œÄ)
        sinpi(p1.phi /œÄ)*( p2Prime[1]*cospi(p1.theta /œÄ) + p2Prime[3]*sinpi(p1.theta/œÄ) ) + p2Prime[2]*cospi(p1.phi/œÄ)
        p2Prime[3]cospi(p1.theta /œÄ) - p2Prime[1]*sinpi(p1.theta /œÄ)
    ]
    
    p2Mag = get_pMag(T, MASS)
    Œ∏2 = acos(p2[3]/p2Mag)
    œï2 = atan(p2[2],p2[1])
    
    if (p2[1] == NaN)
        get_second_vector(T, MASS, p1, Œ∏dif)
    end

    return [ p2Mag, p2[1], p2[2], p2[3], Œ∏2, œï2 ]
end

function get_second_vector(T::Real, MASS::Real, p1::Vector{<:Real},  Œ∏dif::Real)
    p2Prime = get_pPrime(T, MASS, Œ∏dif) # vector generated by randomly chosing point on circle projected onto xy plane

    p2 = [ 
        cospi(p1[6] /œÄ)*( p2Prime[1]*cospi(p1[5] /œÄ) + p2Prime[3]*sinpi(p1[5]/œÄ) ) - p2Prime[2]*sinpi(p1[6]/œÄ)
        sinpi(p1[6] /œÄ)*( p2Prime[1]*cospi(p1[5] /œÄ) + p2Prime[3]*sinpi(p1[5]/œÄ) ) + p2Prime[2]*cospi(p1[6]/œÄ)
        p2Prime[3]cospi(p1[5] /œÄ) - p2Prime[1]*sinpi(p1[5] /œÄ)
    ]
    
    p2Mag = get_pMag(T, MASS)   
    Œ∏2 = acos(p2[3]/p2Mag)
    œï2 = atan(p2[2],p2[1])  

        
    if (p2[1] == NaN)
        get_second_vector(T, MASS, p1, Œ∏dif)
    end
    
    return [ p2Mag, p2[1], p2[2], p2[3], Œ∏2, œï2 ]
end